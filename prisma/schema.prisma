// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== CORE ENTITIES =====

model User {
  id         String     @id @default(cuid())
  name       String
  email      String     @unique
  role       UserRole
  locationId String
  clientId   String
  status     UserStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  location Location @relation(fields: [locationId], references: [id])
  client   Client   @relation(fields: [clientId], references: [id])

  // Journey relations
  assignedJourneys AssignedCrew[]
  createdJourneys  TruckJourney[] @relation("JourneyCreator")
  journeyEntries   JourneyEntry[]
  mediaUploads     Media[]
  auditEntries     AuditEntry[]

  // Mobile relations
  mobileSessions        MobileSession[]
  mobileJourneyUpdates  MobileJourneyUpdate[]
  mobileMediaItems      MobileMediaItem[]
  mobileNotifications   MobileNotification[]

  // Journey step relations
  approvedSteps         JourneyStep[] @relation("StepApprover")
  createdActivities     StepActivity[] @relation("ActivityCreator")

  @@index([clientId, locationId])
  @@index([email])
  @@index([role])
}

model Client {
  id          String   @id @default(cuid())
  name        String
  industry    String?
  isFranchise Boolean  @default(false)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  locations     Location[]
  users         User[]
  truckJourneys TruckJourney[]
  moveSources   MoveSource[]
  auditEntries  AuditEntry[]

  @@index([name])
}

model Location {
  id        String   @id @default(cuid())
  clientId  String
  name      String
  timezone  String   @default("America/Toronto")
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client        Client         @relation(fields: [clientId], references: [id])
  users         User[]
  truckJourneys TruckJourney[]
  auditEntries  AuditEntry[]
  mobileSessions MobileSession[]

  @@index([clientId])
}

model TruckJourney {
  id           String       @id @default(cuid())
  locationId   String
  clientId     String
  date         DateTime
  status       JourneyStage @default(MORNING_PREP)
  truckNumber  String?
  moveSourceId String?
  startTime    DateTime?
  endTime      DateTime?
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  location        Location        @relation(fields: [locationId], references: [id])
  client          Client          @relation(fields: [clientId], references: [id])
  createdBy       User            @relation("JourneyCreator", fields: [createdById], references: [id])
  createdById     String
  assignedCrew    AssignedCrew[]
  entries         JourneyEntry[]
  mediaUploads    Media[]
  mobileUpdates   MobileJourneyUpdate[]
  mobileMedia     MobileMediaItem[]
  journeySteps    JourneyStep[]

  @@index([clientId, locationId])
  @@index([status])
  @@index([date])
}

model JourneyStep {
  id          String        @id @default(cuid())
  journeyId   String
  stepNumber  Int           // 1-4
  stepName    String        // "Ready to Go", "Points A", "New Location", "Back to Dispatcher"
  status      StepStatus    @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  journey   TruckJourney    @relation(fields: [journeyId], references: [id])
  approver  User?           @relation("StepApprover", fields: [approvedBy], references: [id])
  activities StepActivity[]

  @@index([journeyId])
  @@index([stepNumber])
  @@index([status])
}

model StepActivity {
  id           String        @id @default(cuid())
  stepId       String
  activityType ActivityType  @default(CHECKLIST)
  data         Json?         // Flexible data structure for different activity types
  createdBy    String
  createdAt    DateTime      @default(now())

  // Relations
  step    JourneyStep @relation(fields: [stepId], references: [id])
  creator User       @relation("ActivityCreator", fields: [createdBy], references: [id])

  @@index([stepId])
  @@index([createdBy])
  @@index([activityType])
}

model RolePermission {
  id        String @id @default(cuid())
  role      UserRole
  stepNumber Int
  canEdit   Boolean @default(false)
  canApprove Boolean @default(false)
  canView   Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([stepNumber])
}

model AssignedCrew {
  id        String   @id @default(cuid())
  journeyId String
  userId    String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  journey TruckJourney @relation(fields: [journeyId], references: [id])
  user    User         @relation(fields: [userId], references: [id])

  @@index([journeyId])
  @@index([userId])
}

model JourneyEntry {
  id        String    @id @default(cuid())
  journeyId String
  createdBy String
  type      EntryType @default(NOTE)
  data      Json?
  tag       TagType?
  timestamp DateTime  @default(now())

  // Relations
  journey TruckJourney @relation(fields: [journeyId], references: [id])
  user    User         @relation(fields: [createdBy], references: [id])

  @@index([journeyId])
  @@index([createdBy])
  @@index([timestamp])
}

model Media {
  id        String    @id @default(cuid())
  journeyId String
  uploadedBy String
  type      MediaType @default(PHOTO)
  url       String
  filename  String?
  size      Int?
  metadata  Json?
  createdAt DateTime  @default(now())

  // Relations
  journey    TruckJourney @relation(fields: [journeyId], references: [id])
  user       User         @relation(fields: [uploadedBy], references: [id])

  @@index([journeyId])
  @@index([uploadedBy])
  @@index([type])
}

model AuditEntry {
  id         String   @id @default(cuid())
  clientId   String
  locationId String
  userId     String
  action     String
  entity     String
  entityId   String
  diff       Json?
  timestamp  DateTime @default(now())

  // Relations
  client   Client   @relation(fields: [clientId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([locationId])
  @@index([userId])
  @@index([timestamp])
}

model MoveSource {
  id          String   @id @default(cuid())
  clientId    String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client Client @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

// ===== SUPER ADMIN MODELS =====

model SuperAdminUser {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("SUPER_ADMIN")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions   SuperAdminSession[]
  accessLogs CompanyAccessLog[]

  @@index([username])
  @@index([email])
}

model SuperAdminSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user SuperAdminUser @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model CompanyAccessLog {
  id        String   @id @default(cuid())
  adminId   String
  clientId  String
  action    String
  details   Json?
  timestamp DateTime @default(now())

  // Relations
  admin SuperAdminUser @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([clientId])
  @@index([timestamp])
}

// ===== MOBILE APP MODELS =====

model MobileSession {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  locationId String
  lastActive DateTime @default(now())
  offlineData Json?
  syncStatus String @default("online") // online, offline, syncing
  createdAt DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  @@unique([userId, deviceId], name: "MobileSession_userId_deviceId_key")
  @@index([userId])
  @@index([locationId])
  @@index([syncStatus])
}

model MobileJourneyUpdate {
  id        String   @id @default(cuid())
  journeyId String
  userId    String
  updateType String  // status, location, note, checklist, media
  data      Json
  timestamp DateTime @default(now())
  syncStatus String @default("pending") // pending, synced, failed

  // Relations
  user    User         @relation(fields: [userId], references: [id])
  journey TruckJourney @relation(fields: [journeyId], references: [id])

  @@index([journeyId])
  @@index([userId])
  @@index([timestamp])
  @@index([syncStatus])
}

model MobileMediaItem {
  id        String    @id @default(cuid())
  journeyId String
  userId    String
  type      String    // photo, video, signature
  filePath  String
  fileSize  Int?
  metadata  Json?
  uploadStatus String @default("pending") // pending, uploading, completed, failed
  createdAt DateTime  @default(now())

  // Relations
  journey TruckJourney @relation(fields: [journeyId], references: [id])
  user    User         @relation(fields: [userId], references: [id])

  @@index([journeyId])
  @@index([userId])
  @@index([type])
  @@index([uploadStatus])
}

model MobileNotification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  data      Json?
  timestamp DateTime @default(now())
  read      Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([timestamp])
}

// ===== ENUMS =====

enum UserRole {
  ADMIN
  MANAGER
  DRIVER
  MOVER
  DISPATCHER
  AUDITOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum JourneyStage {
  MORNING_PREP
  EN_ROUTE
  ONSITE
  COMPLETED
  AUDITED
}

enum EntryType {
  NOTE
  GPS
  PHOTO
  SIGNATURE
  STATUS_UPDATE
}

enum MediaType {
  PHOTO
  VIDEO
  SIGNATURE
}

enum TagType {
  COMPLETED
  DAMAGE
  FEEDBACK
  ISSUE
  DELAY
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum ActivityType {
  CHECKLIST
  PHOTO
  VIDEO
  APPROVAL
  NOTE
  SIGNATURE
}
-- Company Management System Migration
-- Adds support for external company data integration (LGM, future companies)

-- 1. Company Integration Table
CREATE TABLE IF NOT EXISTS "CompanyIntegration" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "apiSource" TEXT NOT NULL,
    "apiBaseUrl" TEXT NOT NULL,
    "apiKey" TEXT NOT NULL,
    "clientId" TEXT,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "syncFrequencyHours" INTEGER NOT NULL DEFAULT 12,
    "lastSyncAt" TIMESTAMP(3),
    "nextSyncAt" TIMESTAMP(3),
    "syncStatus" TEXT NOT NULL DEFAULT 'PENDING',
    "settings" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyIntegration_pkey" PRIMARY KEY ("id")
);

-- 2. Company Data Sync Log
CREATE TABLE IF NOT EXISTS "CompanyDataSyncLog" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "syncType" TEXT NOT NULL,
    "status" TEXT NOT NULL,
    "recordsProcessed" INTEGER NOT NULL DEFAULT 0,
    "recordsCreated" INTEGER NOT NULL DEFAULT 0,
    "recordsUpdated" INTEGER NOT NULL DEFAULT 0,
    "recordsFailed" INTEGER NOT NULL DEFAULT 0,
    "errorMessage" TEXT,
    "startedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "completedAt" TIMESTAMP(3),
    "metadata" JSONB,

    CONSTRAINT "CompanyDataSyncLog_pkey" PRIMARY KEY ("id")
);

-- 3. Company Branch Data
CREATE TABLE IF NOT EXISTS "CompanyBranch" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "phone" TEXT,
    "isPrimary" BOOLEAN NOT NULL DEFAULT false,
    "country" TEXT NOT NULL,
    "provinceState" TEXT NOT NULL,
    "city" TEXT NOT NULL,
    "fullAddress" TEXT NOT NULL,
    "street" TEXT NOT NULL,
    "zipCode" TEXT NOT NULL,
    "latitude" DOUBLE PRECISION,
    "longitude" DOUBLE PRECISION,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyBranch_pkey" PRIMARY KEY ("id")
);

-- 4. Company Material Data
CREATE TABLE IF NOT EXISTS "CompanyMaterial" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "rate" DECIMAL(10,2) NOT NULL,
    "unit" TEXT,
    "category" TEXT NOT NULL,
    "dimensions" TEXT,
    "maxSize" TEXT,
    "sizeRange" TEXT,
    "capacity" TEXT,
    "weight" TEXT,
    "contents" JSONB,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyMaterial_pkey" PRIMARY KEY ("id")
);

-- 5. Company Service Type Data
CREATE TABLE IF NOT EXISTS "CompanyServiceType" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "scalingFactorPercentage" INTEGER NOT NULL DEFAULT 100,
    "hasActivityLoading" BOOLEAN NOT NULL DEFAULT false,
    "hasActivityFinishedLoading" BOOLEAN NOT NULL DEFAULT false,
    "hasActivityUnloading" BOOLEAN NOT NULL DEFAULT false,
    "order" INTEGER NOT NULL DEFAULT 0,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyServiceType_pkey" PRIMARY KEY ("id")
);

-- 6. Company Move Size Data
CREATE TABLE IF NOT EXISTS "CompanyMoveSize" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "volume" INTEGER NOT NULL,
    "weight" INTEGER NOT NULL,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyMoveSize_pkey" PRIMARY KEY ("id")
);

-- 7. Company Room Type Data
CREATE TABLE IF NOT EXISTS "CompanyRoomType" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "order" INTEGER NOT NULL DEFAULT 0,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyRoomType_pkey" PRIMARY KEY ("id")
);

-- 8. Company User Data
CREATE TABLE IF NOT EXISTS "CompanyUser" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "title" TEXT,
    "email" TEXT,
    "primaryBranchId" TEXT,
    "roleId" TEXT,
    "roleName" TEXT,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyUser_pkey" PRIMARY KEY ("id")
);

-- 9. Company Referral Source Data
CREATE TABLE IF NOT EXISTS "CompanyReferralSource" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "isLeadProvider" BOOLEAN NOT NULL DEFAULT false,
    "isPublic" BOOLEAN NOT NULL DEFAULT false,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyReferralSource_pkey" PRIMARY KEY ("id")
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS "CompanyIntegration_name_idx" ON "CompanyIntegration"("name");
CREATE INDEX IF NOT EXISTS "CompanyIntegration_apiSource_idx" ON "CompanyIntegration"("apiSource");
CREATE INDEX IF NOT EXISTS "CompanyIntegration_isActive_idx" ON "CompanyIntegration"("isActive");
CREATE INDEX IF NOT EXISTS "CompanyIntegration_nextSyncAt_idx" ON "CompanyIntegration"("nextSyncAt");

CREATE INDEX IF NOT EXISTS "CompanyDataSyncLog_companyIntegrationId_idx" ON "CompanyDataSyncLog"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyDataSyncLog_syncType_idx" ON "CompanyDataSyncLog"("syncType");
CREATE INDEX IF NOT EXISTS "CompanyDataSyncLog_status_idx" ON "CompanyDataSyncLog"("status");
CREATE INDEX IF NOT EXISTS "CompanyDataSyncLog_startedAt_idx" ON "CompanyDataSyncLog"("startedAt");

CREATE INDEX IF NOT EXISTS "CompanyBranch_companyIntegrationId_idx" ON "CompanyBranch"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyBranch_externalId_idx" ON "CompanyBranch"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyBranch_city_idx" ON "CompanyBranch"("city");
CREATE INDEX IF NOT EXISTS "CompanyBranch_country_idx" ON "CompanyBranch"("country");
CREATE INDEX IF NOT EXISTS "CompanyBranch_isActive_idx" ON "CompanyBranch"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyMaterial_companyIntegrationId_idx" ON "CompanyMaterial"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyMaterial_externalId_idx" ON "CompanyMaterial"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyMaterial_category_idx" ON "CompanyMaterial"("category");
CREATE INDEX IF NOT EXISTS "CompanyMaterial_isActive_idx" ON "CompanyMaterial"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyServiceType_companyIntegrationId_idx" ON "CompanyServiceType"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyServiceType_externalId_idx" ON "CompanyServiceType"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyServiceType_isActive_idx" ON "CompanyServiceType"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyMoveSize_companyIntegrationId_idx" ON "CompanyMoveSize"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyMoveSize_externalId_idx" ON "CompanyMoveSize"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyMoveSize_isActive_idx" ON "CompanyMoveSize"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyRoomType_companyIntegrationId_idx" ON "CompanyRoomType"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyRoomType_externalId_idx" ON "CompanyRoomType"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyRoomType_isActive_idx" ON "CompanyRoomType"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyUser_companyIntegrationId_idx" ON "CompanyUser"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyUser_externalId_idx" ON "CompanyUser"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyUser_email_idx" ON "CompanyUser"("email");
CREATE INDEX IF NOT EXISTS "CompanyUser_isActive_idx" ON "CompanyUser"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyReferralSource_companyIntegrationId_idx" ON "CompanyReferralSource"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyReferralSource_externalId_idx" ON "CompanyReferralSource"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyReferralSource_isActive_idx" ON "CompanyReferralSource"("isActive");

-- Add foreign key constraints
ALTER TABLE "CompanyDataSyncLog" ADD CONSTRAINT "CompanyDataSyncLog_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyBranch" ADD CONSTRAINT "CompanyBranch_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyMaterial" ADD CONSTRAINT "CompanyMaterial_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyServiceType" ADD CONSTRAINT "CompanyServiceType_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyMoveSize" ADD CONSTRAINT "CompanyMoveSize_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyRoomType" ADD CONSTRAINT "CompanyRoomType_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyUser" ADD CONSTRAINT "CompanyUser_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyReferralSource" ADD CONSTRAINT "CompanyReferralSource_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- Add unique constraints
ALTER TABLE "CompanyIntegration" ADD CONSTRAINT "CompanyIntegration_name_key" UNIQUE ("name");
ALTER TABLE "CompanyBranch" ADD CONSTRAINT "CompanyBranch_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyMaterial" ADD CONSTRAINT "CompanyMaterial_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyServiceType" ADD CONSTRAINT "CompanyServiceType_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyMoveSize" ADD CONSTRAINT "CompanyMoveSize_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyRoomType" ADD CONSTRAINT "CompanyRoomType_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyUser" ADD CONSTRAINT "CompanyUser_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyReferralSource" ADD CONSTRAINT "CompanyReferralSource_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");

-- Insert LGM company integration
INSERT INTO "CompanyIntegration" (
    "id", 
    "name", 
    "apiSource", 
    "apiBaseUrl", 
    "apiKey", 
    "clientId", 
    "isActive", 
    "syncFrequencyHours", 
    "nextSyncAt",
    "syncStatus",
    "settings"
) VALUES (
    'lgm-integration-001',
    'Let''s Get Moving',
    'SmartMoving API',
    'https://api-public.smartmoving.com/v1',
    '185840176c73420fbd3a473c2fdccedb',
    'b0db4e2b-74af-44e2-8ecd-6f4921ec836f',
    true,
    12,
    CURRENT_TIMESTAMP + INTERVAL '12 hours',
    'PENDING',
    '{"dataExtractionDate": "2025-08-08", "totalBranches": 50, "totalMaterials": 59, "totalServiceTypes": 25, "totalMoveSizes": 38, "totalRoomTypes": 10, "totalUsers": 50, "totalReferralSources": 50}'
) ON CONFLICT ("name") DO NOTHING;
-- Company Management System Migration
-- Adds support for external company data integration (LGM, future companies)

-- 1. Company Integration Table
CREATE TABLE IF NOT EXISTS "CompanyIntegration" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "apiSource" TEXT NOT NULL,
    "apiBaseUrl" TEXT NOT NULL,
    "apiKey" TEXT NOT NULL,
    "clientId" TEXT,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "syncFrequencyHours" INTEGER NOT NULL DEFAULT 12,
    "lastSyncAt" TIMESTAMP(3),
    "nextSyncAt" TIMESTAMP(3),
    "syncStatus" TEXT NOT NULL DEFAULT 'PENDING',
    "settings" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyIntegration_pkey" PRIMARY KEY ("id")
);

-- 2. Company Data Sync Log
CREATE TABLE IF NOT EXISTS "CompanyDataSyncLog" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "syncType" TEXT NOT NULL,
    "status" TEXT NOT NULL,
    "recordsProcessed" INTEGER NOT NULL DEFAULT 0,
    "recordsCreated" INTEGER NOT NULL DEFAULT 0,
    "recordsUpdated" INTEGER NOT NULL DEFAULT 0,
    "recordsFailed" INTEGER NOT NULL DEFAULT 0,
    "errorMessage" TEXT,
    "startedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "completedAt" TIMESTAMP(3),
    "metadata" JSONB,

    CONSTRAINT "CompanyDataSyncLog_pkey" PRIMARY KEY ("id")
);

-- 3. Company Branch Data
CREATE TABLE IF NOT EXISTS "CompanyBranch" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "phone" TEXT,
    "isPrimary" BOOLEAN NOT NULL DEFAULT false,
    "country" TEXT NOT NULL,
    "provinceState" TEXT NOT NULL,
    "city" TEXT NOT NULL,
    "fullAddress" TEXT NOT NULL,
    "street" TEXT NOT NULL,
    "zipCode" TEXT NOT NULL,
    "latitude" DOUBLE PRECISION,
    "longitude" DOUBLE PRECISION,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyBranch_pkey" PRIMARY KEY ("id")
);

-- 4. Company Material Data
CREATE TABLE IF NOT EXISTS "CompanyMaterial" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "rate" DECIMAL(10,2) NOT NULL,
    "unit" TEXT,
    "category" TEXT NOT NULL,
    "dimensions" TEXT,
    "maxSize" TEXT,
    "sizeRange" TEXT,
    "capacity" TEXT,
    "weight" TEXT,
    "contents" JSONB,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyMaterial_pkey" PRIMARY KEY ("id")
);

-- 5. Company Service Type Data
CREATE TABLE IF NOT EXISTS "CompanyServiceType" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "scalingFactorPercentage" INTEGER NOT NULL DEFAULT 100,
    "hasActivityLoading" BOOLEAN NOT NULL DEFAULT false,
    "hasActivityFinishedLoading" BOOLEAN NOT NULL DEFAULT false,
    "hasActivityUnloading" BOOLEAN NOT NULL DEFAULT false,
    "order" INTEGER NOT NULL DEFAULT 0,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyServiceType_pkey" PRIMARY KEY ("id")
);

-- 6. Company Move Size Data
CREATE TABLE IF NOT EXISTS "CompanyMoveSize" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "volume" INTEGER NOT NULL,
    "weight" INTEGER NOT NULL,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyMoveSize_pkey" PRIMARY KEY ("id")
);

-- 7. Company Room Type Data
CREATE TABLE IF NOT EXISTS "CompanyRoomType" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "order" INTEGER NOT NULL DEFAULT 0,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyRoomType_pkey" PRIMARY KEY ("id")
);

-- 8. Company User Data
CREATE TABLE IF NOT EXISTS "CompanyUser" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "title" TEXT,
    "email" TEXT,
    "primaryBranchId" TEXT,
    "roleId" TEXT,
    "roleName" TEXT,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyUser_pkey" PRIMARY KEY ("id")
);

-- 9. Company Referral Source Data
CREATE TABLE IF NOT EXISTS "CompanyReferralSource" (
    "id" TEXT NOT NULL,
    "companyIntegrationId" TEXT NOT NULL,
    "externalId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "isLeadProvider" BOOLEAN NOT NULL DEFAULT false,
    "isPublic" BOOLEAN NOT NULL DEFAULT false,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "lastSyncedAt" TIMESTAMP(3),
    "externalData" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "CompanyReferralSource_pkey" PRIMARY KEY ("id")
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS "CompanyIntegration_name_idx" ON "CompanyIntegration"("name");
CREATE INDEX IF NOT EXISTS "CompanyIntegration_apiSource_idx" ON "CompanyIntegration"("apiSource");
CREATE INDEX IF NOT EXISTS "CompanyIntegration_isActive_idx" ON "CompanyIntegration"("isActive");
CREATE INDEX IF NOT EXISTS "CompanyIntegration_nextSyncAt_idx" ON "CompanyIntegration"("nextSyncAt");

CREATE INDEX IF NOT EXISTS "CompanyDataSyncLog_companyIntegrationId_idx" ON "CompanyDataSyncLog"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyDataSyncLog_syncType_idx" ON "CompanyDataSyncLog"("syncType");
CREATE INDEX IF NOT EXISTS "CompanyDataSyncLog_status_idx" ON "CompanyDataSyncLog"("status");
CREATE INDEX IF NOT EXISTS "CompanyDataSyncLog_startedAt_idx" ON "CompanyDataSyncLog"("startedAt");

CREATE INDEX IF NOT EXISTS "CompanyBranch_companyIntegrationId_idx" ON "CompanyBranch"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyBranch_externalId_idx" ON "CompanyBranch"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyBranch_city_idx" ON "CompanyBranch"("city");
CREATE INDEX IF NOT EXISTS "CompanyBranch_country_idx" ON "CompanyBranch"("country");
CREATE INDEX IF NOT EXISTS "CompanyBranch_isActive_idx" ON "CompanyBranch"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyMaterial_companyIntegrationId_idx" ON "CompanyMaterial"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyMaterial_externalId_idx" ON "CompanyMaterial"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyMaterial_category_idx" ON "CompanyMaterial"("category");
CREATE INDEX IF NOT EXISTS "CompanyMaterial_isActive_idx" ON "CompanyMaterial"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyServiceType_companyIntegrationId_idx" ON "CompanyServiceType"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyServiceType_externalId_idx" ON "CompanyServiceType"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyServiceType_isActive_idx" ON "CompanyServiceType"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyMoveSize_companyIntegrationId_idx" ON "CompanyMoveSize"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyMoveSize_externalId_idx" ON "CompanyMoveSize"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyMoveSize_isActive_idx" ON "CompanyMoveSize"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyRoomType_companyIntegrationId_idx" ON "CompanyRoomType"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyRoomType_externalId_idx" ON "CompanyRoomType"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyRoomType_isActive_idx" ON "CompanyRoomType"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyUser_companyIntegrationId_idx" ON "CompanyUser"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyUser_externalId_idx" ON "CompanyUser"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyUser_email_idx" ON "CompanyUser"("email");
CREATE INDEX IF NOT EXISTS "CompanyUser_isActive_idx" ON "CompanyUser"("isActive");

CREATE INDEX IF NOT EXISTS "CompanyReferralSource_companyIntegrationId_idx" ON "CompanyReferralSource"("companyIntegrationId");
CREATE INDEX IF NOT EXISTS "CompanyReferralSource_externalId_idx" ON "CompanyReferralSource"("externalId");
CREATE INDEX IF NOT EXISTS "CompanyReferralSource_isActive_idx" ON "CompanyReferralSource"("isActive");

-- Add foreign key constraints
ALTER TABLE "CompanyDataSyncLog" ADD CONSTRAINT "CompanyDataSyncLog_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyBranch" ADD CONSTRAINT "CompanyBranch_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyMaterial" ADD CONSTRAINT "CompanyMaterial_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyServiceType" ADD CONSTRAINT "CompanyServiceType_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyMoveSize" ADD CONSTRAINT "CompanyMoveSize_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyRoomType" ADD CONSTRAINT "CompanyRoomType_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyUser" ADD CONSTRAINT "CompanyUser_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CompanyReferralSource" ADD CONSTRAINT "CompanyReferralSource_companyIntegrationId_fkey" FOREIGN KEY ("companyIntegrationId") REFERENCES "CompanyIntegration"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- Add unique constraints
ALTER TABLE "CompanyIntegration" ADD CONSTRAINT "CompanyIntegration_name_key" UNIQUE ("name");
ALTER TABLE "CompanyBranch" ADD CONSTRAINT "CompanyBranch_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyMaterial" ADD CONSTRAINT "CompanyMaterial_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyServiceType" ADD CONSTRAINT "CompanyServiceType_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyMoveSize" ADD CONSTRAINT "CompanyMoveSize_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyRoomType" ADD CONSTRAINT "CompanyRoomType_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyUser" ADD CONSTRAINT "CompanyUser_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");
ALTER TABLE "CompanyReferralSource" ADD CONSTRAINT "CompanyReferralSource_companyIntegrationId_externalId_key" UNIQUE ("companyIntegrationId", "externalId");

-- Insert LGM company integration
INSERT INTO "CompanyIntegration" (
    "id", 
    "name", 
    "apiSource", 
    "apiBaseUrl", 
    "apiKey", 
    "clientId", 
    "isActive", 
    "syncFrequencyHours", 
    "nextSyncAt",
    "syncStatus",
    "settings"
) VALUES (
    'lgm-integration-001',
    'Let''s Get Moving',
    'SmartMoving API',
    'https://api-public.smartmoving.com/v1',
    '185840176c73420fbd3a473c2fdccedb',
    'b0db4e2b-74af-44e2-8ecd-6f4921ec836f',
    true,
    12,
    CURRENT_TIMESTAMP + INTERVAL '12 hours',
    'PENDING',
    '{"dataExtractionDate": "2025-08-08", "totalBranches": 50, "totalMaterials": 59, "totalServiceTypes": 25, "totalMoveSizes": 38, "totalRoomTypes": 10, "totalUsers": 50, "totalReferralSources": 50}'
) ON CONFLICT ("name") DO NOTHING;
