// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== CORE ENTITIES =====

model User {
  id         String     @id @default(cuid())
  name       String
  email      String     @unique
  role       UserRole
  locationId String
  clientId   String
  status     UserStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  location Location @relation(fields: [locationId], references: [id])
  client   Client   @relation(fields: [clientId], references: [id])

  // Journey relations
  assignedJourneys AssignedCrew[]
  createdJourneys  TruckJourney[] @relation("JourneyCreator")
  journeyEntries   JourneyEntry[]
  mediaUploads     Media[]
  auditEntries     AuditEntry[]

  @@index([clientId, locationId])
  @@index([email])
  @@index([role])
}

model Client {
  id          String   @id @default(cuid())
  name        String
  industry    String?
  isFranchise Boolean  @default(false)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  locations     Location[]
  users         User[]
  truckJourneys TruckJourney[]
}

model Location {
  id        String   @id @default(cuid())
  clientId  String
  name      String
  timezone  String   @default("America/Toronto")
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client        Client         @relation(fields: [clientId], references: [id])
  users         User[]
  truckJourneys TruckJourney[]
  AuditEntry    AuditEntry[]

  @@index([clientId])
}

model TruckJourney {
  id           String       @id @default(cuid())
  locationId   String
  clientId     String
  date         DateTime
  status       JourneyStage @default(MORNING_PREP)
  truckNumber  String?
  moveSourceId String?
  startTime    DateTime?
  endTime      DateTime?
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  location     Location       @relation(fields: [locationId], references: [id])
  client       Client         @relation(fields: [clientId], references: [id])
  createdBy    User           @relation("JourneyCreator", fields: [createdById], references: [id])
  createdById  String
  assignedCrew AssignedCrew[]
  entries      JourneyEntry[]
  media        Media[]
  auditEntries AuditEntry[]

  @@index([clientId, locationId])
  @@index([date])
  @@index([status])
  @@index([createdById])
}

model AssignedCrew {
  id         String   @id @default(cuid())
  journeyId  String
  userId     String
  role       UserRole
  assignedAt DateTime @default(now())

  // Relations
  journey TruckJourney @relation(fields: [journeyId], references: [id])
  user    User         @relation(fields: [userId], references: [id])

  @@unique([journeyId, userId])
  @@index([journeyId])
  @@index([userId])
}

model JourneyEntry {
  id        String    @id @default(cuid())
  journeyId String
  createdBy String
  type      EntryType
  data      Json
  tag       TagType?
  timestamp DateTime  @default(now())

  // Relations
  journey TruckJourney @relation(fields: [journeyId], references: [id])
  user    User         @relation(fields: [createdBy], references: [id])

  @@index([journeyId])
  @@index([createdBy])
  @@index([type])
  @@index([timestamp])
}

model Media {
  id         String    @id @default(cuid())
  url        String
  type       MediaType
  linkedTo   String // JourneyEntry ID or TruckJourney ID
  uploadedBy String
  createdAt  DateTime  @default(now())

  // Relations
  user    User          @relation(fields: [uploadedBy], references: [id])
  journey TruckJourney? @relation(fields: [linkedTo], references: [id])

  @@index([uploadedBy])
  @@index([type])
  @@index([linkedTo])
}

model AuditEntry {
  id         String   @id @default(cuid())
  action     String // CREATE, UPDATE, DELETE, VIEW
  entity     String // Model name
  entityId   String
  userId     String
  locationId String
  clientId   String
  timestamp  DateTime @default(now())
  diff       Json? // Before/after state for updates

  // Relations
  user     User          @relation(fields: [userId], references: [id])
  location Location      @relation(fields: [locationId], references: [id])
  journey  TruckJourney? @relation(fields: [entityId], references: [id])

  @@index([clientId, locationId])
  @@index([entity, entityId])
  @@index([userId])
  @@index([timestamp])
}

// ===== CRM INTEGRATION STUB =====

model MoveSource {
  id         String   @id @default(cuid())
  externalId String   @unique
  name       String
  address    String?
  phone      String?
  email      String?
  price      Float?
  bookedBy   String?
  status     String   @default("ACTIVE")
  source     String // CRM source (e.g., "HubSpot", "ClickUp")
  clientId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([clientId])
  @@index([externalId])
  @@index([status])
}

// ===== ENUMS =====

enum UserRole {
  ADMIN
  DISPATCHER
  DRIVER
  MOVER
  MANAGER
  AUDITOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum JourneyStage {
  MORNING_PREP
  EN_ROUTE
  ONSITE
  COMPLETED
  AUDITED
}

enum EntryType {
  PHOTO
  NOTE
  GPS
  SIGNATURE
  CONFIRMATION
}

enum MediaType {
  PHOTO
  VIDEO
  SIGNATURE
}

enum TagType {
  DAMAGE
  COMPLETED
  FEEDBACK
  ERROR
  ISSUE
}
