// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== CORE ENTITIES =====

model User {
  id         String     @id @default(cuid())
  name       String
  email      String     @unique
  role       UserRole
  locationId String
  clientId   String
  status     UserStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  location Location @relation(fields: [locationId], references: [id])
  client   Client   @relation(fields: [clientId], references: [id])

  // Journey relations
  assignedJourneys AssignedCrew[]
  createdJourneys  TruckJourney[] @relation("JourneyCreator")
  journeyEntries   JourneyEntry[]
  mediaUploads     Media[]
  auditEntries     AuditEntry[]

  // Mobile relations
  mobileSessions        MobileSession[]
  mobileJourneyUpdates  MobileJourneyUpdate[]
  mobileMediaItems      MobileMediaItem[]
  mobileNotifications   MobileNotification[]

  // Journey step relations
  approvedSteps         JourneyStep[] @relation("StepApprover")
  createdActivities     StepActivity[] @relation("ActivityCreator")

  @@index([clientId, locationId])
  @@index([email])
  @@index([role])
}

model Client {
  id          String   @id @default(cuid())
  name        String
  industry    String?
  isFranchise Boolean  @default(false)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  locations     Location[]
  users         User[]
  truckJourneys TruckJourney[]
  moveSources   MoveSource[]
  auditEntries  AuditEntry[]

  @@index([name])
}

model Location {
  id        String   @id @default(cuid())
  clientId  String
  name      String
  timezone  String   @default("America/Toronto")
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client        Client         @relation(fields: [clientId], references: [id])
  users         User[]
  truckJourneys TruckJourney[]
  auditEntries  AuditEntry[]
  mobileSessions MobileSession[]

  @@index([clientId])
}

model TruckJourney {
  id           String       @id @default(cuid())
  locationId   String
  clientId     String
  date         DateTime
  status       JourneyStage @default(MORNING_PREP)
  truckNumber  String?
  moveSourceId String?
  startTime    DateTime?
  endTime      DateTime?
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  location        Location        @relation(fields: [locationId], references: [id])
  client          Client          @relation(fields: [clientId], references: [id])
  createdBy       User            @relation("JourneyCreator", fields: [createdById], references: [id])
  createdById     String
  assignedCrew    AssignedCrew[]
  entries         JourneyEntry[]
  mediaUploads    Media[]
  mobileUpdates   MobileJourneyUpdate[]
  mobileMedia     MobileMediaItem[]
  journeySteps    JourneyStep[]

  @@index([clientId, locationId])
  @@index([status])
  @@index([date])
}

model JourneyStep {
  id          String        @id @default(cuid())
  journeyId   String
  stepNumber  Int           // 1-4
  stepName    String        // "Ready to Go", "Points A", "New Location", "Back to Dispatcher"
  status      StepStatus    @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  journey   TruckJourney    @relation(fields: [journeyId], references: [id])
  approver  User?           @relation("StepApprover", fields: [approvedBy], references: [id])
  activities StepActivity[]

  @@index([journeyId])
  @@index([stepNumber])
  @@index([status])
}

model StepActivity {
  id           String        @id @default(cuid())
  stepId       String
  activityType ActivityType  @default(CHECKLIST)
  data         Json?         // Flexible data structure for different activity types
  createdBy    String
  createdAt    DateTime      @default(now())

  // Relations
  step    JourneyStep @relation(fields: [stepId], references: [id])
  creator User       @relation("ActivityCreator", fields: [createdBy], references: [id])

  @@index([stepId])
  @@index([createdBy])
  @@index([activityType])
}

model RolePermission {
  id        String @id @default(cuid())
  role      UserRole
  stepNumber Int
  canEdit   Boolean @default(false)
  canApprove Boolean @default(false)
  canView   Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([stepNumber])
}

model AssignedCrew {
  id        String   @id @default(cuid())
  journeyId String
  userId    String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  journey TruckJourney @relation(fields: [journeyId], references: [id])
  user    User         @relation(fields: [userId], references: [id])

  @@index([journeyId])
  @@index([userId])
}

model JourneyEntry {
  id        String    @id @default(cuid())
  journeyId String
  createdBy String
  type      EntryType @default(NOTE)
  data      Json?
  tag       TagType?
  timestamp DateTime  @default(now())

  // Relations
  journey TruckJourney @relation(fields: [journeyId], references: [id])
  user    User         @relation(fields: [createdBy], references: [id])

  @@index([journeyId])
  @@index([createdBy])
  @@index([timestamp])
}

model Media {
  id        String    @id @default(cuid())
  journeyId String
  uploadedBy String
  type      MediaType @default(PHOTO)
  url       String
  filename  String?
  size      Int?
  metadata  Json?
  createdAt DateTime  @default(now())

  // Relations
  journey    TruckJourney @relation(fields: [journeyId], references: [id])
  user       User         @relation(fields: [uploadedBy], references: [id])

  @@index([journeyId])
  @@index([uploadedBy])
  @@index([type])
}

model AuditEntry {
  id         String   @id @default(cuid())
  clientId   String
  locationId String
  userId     String
  action     String
  entity     String
  entityId   String
  diff       Json?
  timestamp  DateTime @default(now())

  // Relations
  client   Client   @relation(fields: [clientId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([locationId])
  @@index([userId])
  @@index([timestamp])
}

model MoveSource {
  id          String   @id @default(cuid())
  clientId    String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client Client @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

// ===== SUPER ADMIN MODELS =====

model SuperAdminUser {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("SUPER_ADMIN")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions   SuperAdminSession[]
  accessLogs CompanyAccessLog[]

  @@index([username])
  @@index([email])
}

model SuperAdminSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user SuperAdminUser @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model CompanyAccessLog {
  id        String   @id @default(cuid())
  adminId   String
  clientId  String
  action    String
  details   Json?
  timestamp DateTime @default(now())

  // Relations
  admin SuperAdminUser @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([clientId])
  @@index([timestamp])
}

// ===== MOBILE APP MODELS =====

model MobileSession {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  locationId String
  lastActive DateTime @default(now())
  offlineData Json?
  syncStatus String @default("online") // online, offline, syncing
  createdAt DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  @@unique([userId, deviceId], name: "MobileSession_userId_deviceId_key")
  @@index([userId])
  @@index([locationId])
  @@index([syncStatus])
}

model MobileJourneyUpdate {
  id        String   @id @default(cuid())
  journeyId String
  userId    String
  updateType String  // status, location, note, checklist, media
  data      Json
  timestamp DateTime @default(now())
  syncStatus String @default("pending") // pending, synced, failed

  // Relations
  user    User         @relation(fields: [userId], references: [id])
  journey TruckJourney @relation(fields: [journeyId], references: [id])

  @@index([journeyId])
  @@index([userId])
  @@index([timestamp])
  @@index([syncStatus])
}

model MobileMediaItem {
  id        String    @id @default(cuid())
  journeyId String
  userId    String
  type      String    // photo, video, signature
  filePath  String
  fileSize  Int?
  metadata  Json?
  uploadStatus String @default("pending") // pending, uploading, completed, failed
  createdAt DateTime  @default(now())

  // Relations
  journey TruckJourney @relation(fields: [journeyId], references: [id])
  user    User         @relation(fields: [userId], references: [id])

  @@index([journeyId])
  @@index([userId])
  @@index([type])
  @@index([uploadStatus])
}

model MobileNotification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  data      Json?
  timestamp DateTime @default(now())
  read      Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([timestamp])
}

// ===== ENUMS =====

enum UserRole {
  ADMIN
  MANAGER
  DRIVER
  MOVER
  DISPATCHER
  AUDITOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum JourneyStage {
  MORNING_PREP
  EN_ROUTE
  ONSITE
  COMPLETED
  AUDITED
}

enum EntryType {
  NOTE
  GPS
  PHOTO
  SIGNATURE
  STATUS_UPDATE
}

enum MediaType {
  PHOTO
  VIDEO
  SIGNATURE
}

enum TagType {
  COMPLETED
  DAMAGE
  FEEDBACK
  ISSUE
  DELAY
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum ActivityType {
  CHECKLIST
  PHOTO
  VIDEO
  APPROVAL
  NOTE
  SIGNATURE
}

// Company Management System Models
// ===============================

model CompanyIntegration {
  id                String   @id @default(cuid())
  name              String   @unique
  apiSource         String
  apiBaseUrl        String
  apiKey            String
  clientId          String?
  isActive          Boolean  @default(true)
  syncFrequencyHours Int     @default(12)
  lastSyncAt        DateTime?
  nextSyncAt        DateTime?
  syncStatus        String   @default("PENDING")
  settings          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  syncLogs          CompanyDataSyncLog[]
  branches          CompanyBranch[]
  materials         CompanyMaterial[]
  serviceTypes      CompanyServiceType[]
  moveSizes         CompanyMoveSize[]
  roomTypes         CompanyRoomType[]
  users             CompanyUser[]
  referralSources   CompanyReferralSource[]

  @@map("CompanyIntegration")
}

model CompanyDataSyncLog {
  id                  String   @id @default(cuid())
  companyIntegrationId String
  syncType            String
  status              String
  recordsProcessed    Int      @default(0)
  recordsCreated      Int      @default(0)
  recordsUpdated      Int      @default(0)
  recordsFailed       Int      @default(0)
  errorMessage        String?
  startedAt           DateTime @default(now())
  completedAt         DateTime?
  metadata            Json?

  // Relations
  companyIntegration  CompanyIntegration @relation(fields: [companyIntegrationId], references: [id], onDelete: Cascade)

  @@map("CompanyDataSyncLog")
}

model CompanyBranch {
  id                  String   @id @default(cuid())
  companyIntegrationId String
  externalId          String
  name                String
  phone               String?
  isPrimary           Boolean  @default(false)
  country             String
  provinceState       String
  city                String
  fullAddress         String
  street              String
  zipCode             String
  latitude            Float?
  longitude           Float?
  isActive            Boolean  @default(true)
  lastSyncedAt        DateTime?
  externalData        Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  companyIntegration  CompanyIntegration @relation(fields: [companyIntegrationId], references: [id], onDelete: Cascade)

  // Unique constraints
  @@unique([companyIntegrationId, externalId])
  @@map("CompanyBranch")
}

model CompanyMaterial {
  id                  String   @id @default(cuid())
  companyIntegrationId String
  externalId          String
  name                String
  description         String?
  rate                Decimal  @db.Decimal(10, 2)
  unit                String?
  category            String
  dimensions          String?
  maxSize             String?
  sizeRange           String?
  capacity            String?
  weight              String?
  contents            Json?
  isActive            Boolean  @default(true)
  lastSyncedAt        DateTime?
  externalData        Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  companyIntegration  CompanyIntegration @relation(fields: [companyIntegrationId], references: [id], onDelete: Cascade)

  // Unique constraints
  @@unique([companyIntegrationId, externalId])
  @@map("CompanyMaterial")
}

model CompanyServiceType {
  id                  String   @id @default(cuid())
  companyIntegrationId String
  externalId          String
  name                String
  description         String?
  category            String?
  isActive            Boolean  @default(true)
  lastSyncedAt        DateTime?
  externalData        Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  companyIntegration  CompanyIntegration @relation(fields: [companyIntegrationId], references: [id], onDelete: Cascade)

  // Unique constraints
  @@unique([companyIntegrationId, externalId])
  @@map("CompanyServiceType")
}

model CompanyMoveSize {
  id                  String   @id @default(cuid())
  companyIntegrationId String
  externalId          String
  name                String
  description         String?
  sizeRange           String?
  isActive            Boolean  @default(true)
  lastSyncedAt        DateTime?
  externalData        Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  companyIntegration  CompanyIntegration @relation(fields: [companyIntegrationId], references: [id], onDelete: Cascade)

  // Unique constraints
  @@unique([companyIntegrationId, externalId])
  @@map("CompanyMoveSize")
}

model CompanyRoomType {
  id                  String   @id @default(cuid())
  companyIntegrationId String
  externalId          String
  name                String
  description         String?
  category            String?
  isActive            Boolean  @default(true)
  lastSyncedAt        DateTime?
  externalData        Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  companyIntegration  CompanyIntegration @relation(fields: [companyIntegrationId], references: [id], onDelete: Cascade)

  // Unique constraints
  @@unique([companyIntegrationId, externalId])
  @@map("CompanyRoomType")
}

model CompanyUser {
  id                  String   @id @default(cuid())
  companyIntegrationId String
  externalId          String
  name                String
  email               String?
  phone               String?
  role                String?
  isActive            Boolean  @default(true)
  lastSyncedAt        DateTime?
  externalData        Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  companyIntegration  CompanyIntegration @relation(fields: [companyIntegrationId], references: [id], onDelete: Cascade)

  // Unique constraints
  @@unique([companyIntegrationId, externalId])
  @@map("CompanyUser")
}

model CompanyReferralSource {
  id                  String   @id @default(cuid())
  companyIntegrationId String
  externalId          String
  name                String
  description         String?
  category            String?
  isActive            Boolean  @default(true)
  lastSyncedAt        DateTime?
  externalData        Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  companyIntegration  CompanyIntegration @relation(fields: [companyIntegrationId], references: [id], onDelete: Cascade)

  // Unique constraints
  @@unique([companyIntegrationId, externalId])
  @@map("CompanyReferralSource")
}
