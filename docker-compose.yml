# C&C CRM - Docker Compose for Local Development
# Command & Control CRM for Moving & Logistics Operations

services:
  # ===== DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: c-and-c-crm-db
    environment:
      POSTGRES_DB: c_and_c_crm
      POSTGRES_USER: c_and_c_user
      POSTGRES_PASSWORD: c_and_c_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U c_and_c_user -d c_and_c_crm"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - c-and-c-network

  # ===== REDIS (for caching and sessions) =====
  redis:
    image: redis:7-alpine
    container_name: c-and-c-crm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - c-and-c-network

  # ===== BACKEND API =====
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: c-and-c-crm-api
    environment:
      - DATABASE_URL=postgresql://c_and_c_user:c_and_c_password@postgres:5432/c_and_c_crm
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key-change-in-production
      - ENVIRONMENT=development
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    ports:
      - "8000:8000"
    volumes:
      - ./apps/api:/app/apps/api
      - ./modules:/app/modules
      - ./prisma:/app/prisma
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn apps.api.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - c-and-c-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== FRONTEND =====
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-builder
    container_name: c-and-c-crm-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - ./packages:/app/packages
      - /app/apps/frontend/node_modules
      - /app/apps/frontend/.next
    depends_on:
      - api
    working_dir: /app/apps/frontend
    command: npm run dev
    networks:
      - c-and-c-network

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# ===== NETWORKS =====
networks:
  c-and-c-network:
    driver: bridge 